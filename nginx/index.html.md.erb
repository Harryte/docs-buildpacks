---
title: NGINX Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='overview'></a> Overview

This topic describes how to configure your NGINX application for use with the NGINX buildpack and how to push your NGINX app to Cloud Foundry.

## <a id='pushing-apps'></a> Push an App ##

Cloud Foundry automatically uses the NGINX buildpack when one or more of the following conditions are met:

- The pushed app contains an `nginx.conf` file.

If your Cloud Foundry deployment does not have the NGINX buildpack installed or the installed version is out of date, push your app with the `-b` option to specify the buildpack:

<pre class="terminal">
$ cf push MY-APP -b https://github.com/cloudfoundry/nginx-buildpack.git
</pre>

## <a id='nginx'></a>NGINX Setup ##

We recommend using the [default NGINX directory structure](https://github.com/cloudfoundry/nginx-buildpack/tree/master/fixtures/mainline) for your NGINX webserver.

The NGINX webserver setup includes:

* A root folder for all static web content
* A mime type configuration file
* A NGINX configuration file
* A `buildpacks.yml` yaml file that defines what version of NGINX you want to use

Any custom configuration changes should be made from these default files to ensure compatability with the buildpack.

## <a id='templating'></a> nginx.conf Templating
When writing an `nginx.conf` file to be used with the NGINX buildpack, there is a templating syntax available. This allows you to load modules and bind to ports based on values known at launch time.

### <a id='port'></a> Port
When setting the port you're listening on, use `{{port}}` in your `nginx.conf`. This will interpolate in the value of `$PORT`.

<p class="note"><strong>Note</strong>: It is required to use <code>{{port}}</code> in your <code>nginx.conf</code>.</p>

For example, to have an nginx server listen on `$PORT`:
```
server {
  listen {{port}};
}
```

### <a id='env'></a> Environment Variables
Use `{{env "<variable name>"}}` to get the value of `$variable_name`. This value will be filled in at staging and at launch.

For example, to turn gzipping of files served on or off based on an env variable:
```
gzip {{env "GZIP_DOWNLOADS"}};
```
When `GZIP_DOWNLOADS` is set to `off`, NGINX will not gzip things. When `GZIP_DOWNLOADS` is set to `on`, it will.

### <a id='provided-modules'></a> Buildpack-Provided Modules

For nginx-buildpack v0.0.5 and later, the following dynamic modules will be built in:

* Stream module: `ngx_stream_module.so`

To use a built-in dynamic module, use the `{{module "<module file name>"}}` syntax at the top of your `nginx.conf`.

For example, to use the stream module:

  ```
  {{module "ngx_stream_module"}}
  ```

## <a id='user-modules'></a> User-Provided Modules
Users can supply their own dynamic modules by placing them in the application directory and supplying a relative path to the module in the `nginx.conf` file. To configure a user-provided dynamic module, use the standard `nginx.conf` syntax: `load_module <path to module>;`.

For example, to use a module called `my_module.so` inside a `modules` directory:

  ```
  load_module modules/my_module.so;
  ```

## <a id='help'></a>Buildpack Support

A number of channels exist where you can get more help when using the NGINX buildpack, or with developing your own NGINX buildpack.

* **NGINX Buildpack Repository in Github**: Find more information about using and extending the NGINX buildpack in [GitHub repository](https://github.com/cloudfoundry/nginx-buildpack).

* **Release Notes**: Find current information about this buildpack on the NGINX buildpack [release page](https://github.com/cloudfoundry/nginx-buildpack/releases) in GitHub.

* **Slack**: Join the #buildpacks channel in the [Cloud Foundry Slack community](http://slack.cloudfoundry.org/).


