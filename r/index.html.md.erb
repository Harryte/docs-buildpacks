---
title: R Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='pushing_apps'></a> Push an App

Cloud Foundry automatically uses the R buildpack if it detects a
`r.yml` file in the root directory of your project.

If your Cloud Foundry deployment does not have the R Buildpack installed, or the installed version is out of date, you can use the latest version by specifying it with the `-b` option when you push your app. For example:

<pre class="terminal">
$ cf push my_app -b https://github.com/cloudfoundry/r-buildpack.git
</pre>


## <a id='supported_versions'></a> Supported Versions

You can find the list of supported R versions in the [R buildpack release notes](https://github.com/cloudfoundry/r-buildpack/releases).


### <a id='start_command'></a>Start Command ###

The R buildpack does not generate a [default start command](../../devguide/deploy-apps/start-restart-restage.html#first-time) for your applications.

To stage with the R buildpack and start an application, do one of the following:

-  Supply a Procfile. For more information about Procfiles, see the [Configuring a Production Server](../prod-server.html) topic. The following example Procfile specifies `R -f` as the start command for a web app with the entrypoint `simple.r`:

    ```
    web: R -f simple.r
    ```

- Specify a start command with `-c`:

    ```
    $ cf push r-app -c "R -f simple.r"
    ```

- Specify a start command in the application manifest by setting the `command` attribute. For more information, see the [Deploying with Application Manifests](../../devguide/deploy-apps/manifest.html#start-commands) topic.

## <a id='specifying_dependencies'></a> Specifying App Dependencies

As of v0.0.5, the following packages are provided by the buildpack:

- Rserve
- forecast
- shiny

To specify additional packages needed by your app, provide the CRAN mirror and names of the packages inside your `r.yml` file. For example:

```

---
packages:
  - cran_mirror: https://cran.r-project.org
    packages:
      - name: stringr
      - name: jsonlite
```


## <a id='vendoring'></a> Vendoring App Dependencies

If you are deploying in an environment that is disconnected from the Internet, your application [must vendor its dependencies](https://github.com/cf-buildpacks/buildpack-packager/blob/master/doc/disconnected_environments.md).

To set up your own custom, local CRAN-like repository to vendor your packages, create the `src/contrib` directories and populate them with your package source tarballs. For more information, check out this [step-by-step guide](https://rstudio.github.io/packrat/custom-repos.html).

Add the `src/contrib` directories containing your package tarballs to a `vendor_r` directory at the root of your app. This directory is named as such so as not to conflict with vendor directories of other languages, such as python.

Then, inside your `r.yml`, provide the names of your vendored packages in the `packages` list:

<pre class="terminal">

---
packages:
  - packages:
      - name: stringr
      - name: jsonlite
</pre>


`cf push` uploads your vendored dependencies. The buildpack installs them directly from the `vendor_r/` directory.

Example app directory tree:

```
├── r.yml
├── simple-app.r
└── vendor_r
    └── src
        └── contrib
            ├── PACKAGES
            ├── PACKAGES.gz
            ├── jsonlite_1.5.tar.gz
            └── stringr_1.3.1.tar.gz
```

## <a id='proxy_support'></a> Proxy Support

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and `https_proxy` environment variables. For more information, see the [Proxy Usage Documentation](http://docs.cloudfoundry.org/buildpacks/proxy-usage.html).


## <a id='bosh_trusted_cert'></a> BOSH Configured Custom Trusted Certificate Support

R uses certificates stored in `/etc/ssl/certs`. Your platform operator can configure the platform to [add the custom certificates into the application container](https://docs.cloudfoundry.org/adminguide/trusted-system-certificates.html).


## <a id='help_support'></a> Help and Support

Join the #buildpacks channel in our [Slack community](http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the R buildpack in Cloud Foundry, see the [R-buildpack GitHub repository](https://github.com/cloudfoundry/r-buildpack).

You can find current information about this buildpack on the [R buildpack
release page](https://github.com/cloudfoundry/r-buildpack/releases) in GitHub.
