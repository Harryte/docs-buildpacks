---
title: Migrating to Node.js Cloud Native Buildpack
owner: Buildpacks
---

This topic describes how to install the Node.js Cloud Native Buildpack (CNB).
### Install Processes:
With the new Node.js Cloud Native Buildpack, the installation commands
that we choose to build an applications `node_modules` have changed
as follows:

  - We assume that all of the following are updated and in agreement
    before an application is `cf pushed`
    - `package.json`
    - `package-lock.json` (optional)
    - `node_modules` (optional)
    - `npm-cache` (optional)
    - `yarn.lock` (optional)


As a result we require that apps that contain `node_modules` or `npm-cache` must contain
all of the dependencies required for a successfull `npm` or `yarn` install.

For additional details on how the installation process is chosen of this buildpack see
[ Node.js Cloud Native Buildpack installation process](../nodejs-cnb#npm-installation-process).

<p class="note"><strong>Note:</strong> Due to the modular nature of CNB,
the new Node.js buildpack does not currently
include certain external integration helpers, such as those for APM agents.
</p>

### Buildpack ordering
The compatibility layer generated by `cnb2cf` imposes some additional
constraints on multi-buildpacks builds.  If a CF-compatible CNB is used during
multibuildpack builds. All subsequent buildpacks must also be CF-compatible CNB.
In the example `cf push` below all buildpacks between
`compat-cn_buildpack_1` and `compat-cn_buildpack_n` must be a CF-compatible CNB.

```
  cf push -b bpack_1 -b bpack_2 -b compat-cn_bpack_1 ... -b compat-cn_bpack_n
```

## Migration Guide:
### Vendored Applications with NPM
  Vendored application now must vendor ALL dependencies listed in `package.json`
#### Using `node_modules`
Validate that all modules are vendored into the `node_modules` by the following:
```
  npm list
```
If there are missing dependencies listed, this application will fail to build.
Simply re-vendor by running the following in the root of your application:

```
  npm install <your prefered flags>
```

#### Using `npm-cache`
This is a newly added
```
npm ci --cache npm-cache
```

### Online applications with NPM
#### Remove partially vendored components
Online applications must not contain either a `node_modules` or `npm-cache`
directory in the root directory of the application. Remove these before running
`cf-push`

#### Make sure all dependencies are met
Applications must contain all required dependencies after an install.
If you provide a `package.json` and all modules cannot be installed
the subsequent `npm list` check will cause the build to fail

### Yarn Applications


#### `yarn.lock` must agree with package.json

Yarn applications will have dependencies installed from the `yarn.lock` file.
This differs from the behavior of the Node.js Buildpack which installs
dependencies from the `package.json` file. To avoid discrepancies in installed
packages, please generate an up to date `yarn.lock` file before running a `cf push`
using:

```
yarn install <your preferred flags>
```
