---
title: PHP Cloud-Native Buildpack
owner: Buildpacks
---

This topic describes using the PHP cloud-native buildpack (CNB) to deploy your apps.

## <a id='supported_software'></a> Supported Software and Versions ##
The [release notes page](https://github.com/cloudfoundry/php-buildpack/releases) has a list of currently supported PHP versions and extensions.

* **PHP Versions**
  * The two most recent maintenance versions of every [actively supported PHP minor release](https://www.php.net/supported-versions.php) are available.
* **PHP Extensions**
  * Included as shared libraries are many of the most popular PHP Extensions, ready for use in your apps.

## <a id='pushing_apps'></a> Push an App ##
### <a id='quick_start'></a> 30 Second Tutorial ###

Getting started with this cloud-native buildpack is easy. With the [Cloud Foundry Command Line Interface](https://github.com/cloudfoundry/cli) installed, open a shell, change directories to the root of your PHP files and push your application.

Example:

<pre class="terminal">
$ mkdir my-php-app
$ cd my-php-app
$ mkdir htdocs
$ cat << EOF > htdocs/index.php
&lt;?php
  phpinfo();
?&gt;
EOF
$ cf push -m 128M my-php-app
</pre>

Change **my-php-app** in the above example to a unique name on your target Cloud Foundry instance to prevent a hostname conflict error and failed push.

The example above creates and pushes a test application, **my-php-app**, to Cloud Foundry. It sets the memory limit to 128M which is plenty for a small PHP app. For questions on those consult the output of `cf help push`.

Here's a breakdown of what happens when you run the example above.

  - On your PC:
    - It will create a project folder, a folder for your public files and one PHP file, which just invokes `phpinfo()`
    - Run `cf` to push your application.  This will create a new application with a memory limit of 128M (more than enough here) and upload our test file.
  - Within Cloud Foundry:
    - The buildpack is executed.
    - PHP is downloaded, configured with the buildpack defaults and run.
    - Your application is accessible at the URL `http://my-php-app.example.com` (Replacing `example.com` with the domain of your public CF provider or private instance).

### <a id='more_info'></a> More information about deploying ###
While the *30 Second Tutorial* shows how quick and easy it is to get started using the buildpack, it skips over quite a bit of what you can do to adjust, configure and extend the buildpack.  The following sections and links provide a more in-depth look at the buildpack.

### <a id='features'></a> Features ###

Here are some special features of the buildpack.

  - Full support for deploying PHP apps that use [Composer](https://getcomposer.org/)
  - Supports three different HTTP server options: [PHP built-in web server](https://www.php.net/manual/en/features.commandline.webserver.php), [Apache HTTP Server](https://httpd.apache.org/) and [Nginx](https://nginx.org/)
  - Automatic configuration of PHP-FPM, when using external web servers
  - Smart session storage, defaults to file w/sticky sessions but can also use Redis or Memcached for storage.
  - Automatically updated PHP binaries, compiled with a large set of PHP extensions.

### <a id='examples'></a> Examples ###

Here are some example applications that can be used with this buildpack.

  - [php-info]  This app has a basic index page and shows the output of `phpinfo()`.
  - [PHPMyAdmin]  A deployment of PHPMyAdmin that uses bound MySQL services.
  - [PHPPgAdmin] A deployment of PHPPgAdmin that uses bound PostgreSQL services.
  - [Drupal] A deployment of Drupal that uses bound MySQL service.
  - [CodeIgniter]  CodeIgniter tutorial application running on CF.
  - [Stand Alone]  An example which runs a standalone PHP script.
  - [pgbouncer]  An example which runs the PgBouncer process in the container to pool database connections.
  - [phalcon]  An example which runs a Phalcon based application.
  - [composer] An example which uses Composer.

There are also a set of [acceptence tests which are run against the PHP CNB](https://github.com/cloudfoundry/buildpack-acceptance-tests/tree/master/php/testdata) that you can review for more examples.

### <a id='examples'></a> Advanced Topics ###
See the following topics:

* <a href="./php-usage.html" class="subnav">Getting Started Deploying PHP Apps</a>
* <a href="./php-config.html" class="subnav">PHP CNB Configuration</a>
* <a href="./php-composer.html" class="subnav">Composer</a>
* <a href="./php-sessions.html" class="subnav">Sessions</a>

You can find the source for the cloud-native buildpack on GitHub:

* [https://github.com/cloudfoundry/php-cnb](https://github.com/cloudfoundry/php-cnb)
* [https://github.com/cloudfoundry/php-dist-cnb](https://github.com/cloudfoundry/phpdist--cnb)
* [https://github.com/cloudfoundry/php-composer-cnb](https://github.com/cloudfoundry/php-composer-cnb)
* [https://github.com/cloudfoundry/php-compat-cnb](https://github.com/cloudfoundry/php-compat-cnb)
* [https://github.com/cloudfoundry/php-web-cnb](https://github.com/cloudfoundry/php-web-cnb)
* [https://github.com/cloudfoundry/httpd-cnb](https://github.com/cloudfoundry/httpd-cnb)
* [https://github.com/cloudfoundry/nginx-cnb](https://github.com/cloudfoundry/nginx-cnb)

## <a id='proxy_support'></a> Proxy Support ##

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and/or `https_proxy` environment variables. For more information, see
the [Proxy Usage Docs](../proxy-usage.html).

## <a id='bosh_trusted_cert'></a>BOSH Configured Custom Trusted Certificate Support ##

For versions of PHP 5.6.0 and later, the default certificate location is `/usr/lib/ssl/certs`, which symlinks to `/etc/ssl/certs`.
Your platform operator can configure the platform to [add the custom certificates into the application container](https://docs.cloudfoundry.org/adminguide/trusted-system-certificates.html).

## <a id='help_support'></a>Help and Support ##

Join the #buildpacks channel in our [Slack community](http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the PHP cloud-native buildpack in Cloud Foundry, see
the [php-cnb GitHub repository](https://github.com/cloudfoundry/php-cnb).

You can find current information about this buildpack on the PHP buildpack
[release page](https://github.com/cloudfoundry/php-cnb/releases) in GitHub.

## License

The Cloud Foundry PHP Cloud-Native Buildpack is released under version 2.0 of the [Apache License].

[Configuration Options]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/config.md
[Development]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/development.md
[Troubleshooting]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/troubleshooting.md
[Usage]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/usage.md
[Binaries]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/binaries.md
[php-info]:https://github.com/cloudfoundry-samples/cf-ex-php-info
[PHPMyAdmin]:https://github.com/cloudfoundry-samples/cf-ex-phpmyadmin
[PHPPgAdmin]:https://github.com/cloudfoundry-samples/cf-ex-phppgadmin
[Drupal]:https://github.com/cloudfoundry-samples/cf-ex-drupal
[CodeIgniter]:https://github.com/cloudfoundry-samples/cf-ex-code-igniter
[Stand Alone]:https://github.com/cloudfoundry-samples/cf-ex-stand-alone
[pgbouncer]:https://github.com/cloudfoundry-samples/cf-ex-pgbouncer
[phalcon]:https://github.com/cloudfoundry-samples/cf-ex-phalcon
[composer]:https://github.com/cloudfoundry-samples/cf-ex-composer
[Apache License]:http://www.apache.org/licenses/LICENSE-2.0
[vcap-dev]:https://groups.google.com/a/cloudfoundry.org/forum/#!forum/vcap-dev
[Composer support]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/composer.md
["offline" mode]:https://github.com/cloudfoundry/php-buildpack/blob/master/docs/binaries.md#bundling-binaries-with-the-build-pack

